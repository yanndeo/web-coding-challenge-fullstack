{"ast":null,"code":"import axios from \"axios\"; //Types\n\nimport { REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, AUTH_ERROR } from \"./types\"; //Others actions\n\nimport { _setAlert } from \"./alert\"; //Utils\n\nimport { API_URI } from \"../utils/uri\";\nimport configTokenInHeader from \"../utils/configTokenInHeader\";\n/**\n * Load User.\n */\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    configTokenInHeader();\n  }\n};\n/**\n * Register User\n */\n\nexport const _register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  //1-Define it explicitly (like in postman environment)\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    } //2-Convert the JavaScript object to a JSON object\n\n  };\n  const userData = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    //3-Send request to node server \n    let response = await axios.post(\"\".concat(API_URI, \"/register\"), userData, config); //4-Dispatch action\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: response.data //srv return token\n\n    });\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      for (const err of errors) {\n        dispatch(_setAlert(err.msg, 'danger')); //We call the action directly\n      }\n    }\n\n    dispatch({\n      type: REGISTER_FAIL //we don't need a payload\n\n    });\n  }\n};","map":{"version":3,"sources":["/Users/Maranatha/Desktop/PROJECT_JS/MERN_LIST_SHOPS_APP/client/src/actions/auth.js"],"names":["axios","REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","AUTH_ERROR","_setAlert","API_URI","configTokenInHeader","loadUser","dispatch","localStorage","token","_register","name","email","password","config","headers","userData","JSON","stringify","response","post","type","payload","data","error","errors","err","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA2CC,WAA3C,EAAwDC,UAAxD,QAAyE,SAAzE,C,CACA;;AACA,SAASC,SAAT,QAA0B,SAA1B,C,CACA;;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AAIA;;;;AAGA,OAAO,MAAMC,QAAQ,GAAG,MAAK,MAAMC,QAAN,IAAiB;AAE1C,MAAGC,YAAY,CAACC,KAAhB,EAAsB;AAClBJ,IAAAA,mBAAmB;AACtB;AACJ,CALM;AAOP;;;;AAGA,OAAO,MAAMK,SAAS,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAD,KAA8B,MAAMN,QAAN,IAAkB;AAErE;AACA,QAAMO,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAiB;AADZ,KADE,CAMf;;AANe,GAAf;AAOA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,GAAf,CAAjB;;AAEA,MAAI;AACA;AACA,QAAIM,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAN,WAAchB,OAAd,gBAAkCY,QAAlC,EAA4CF,MAA5C,CAArB,CAFA,CAIA;;AACAP,IAAAA,QAAQ,CAAC;AACLc,MAAAA,IAAI,EAAErB,gBADD;AAELsB,MAAAA,OAAO,EAAEH,QAAQ,CAACI,IAFb,CAEmB;;AAFnB,KAAD,CAAR;AAKH,GAVD,CAUE,OAAOC,KAAP,EAAc;AAEZ,UAAMC,MAAM,GAAGD,KAAK,CAACL,QAAN,CAAeI,IAAf,CAAoBE,MAAnC;;AAEA,QAAGA,MAAH,EAAU;AACN,WAAK,MAAMC,GAAX,IAAkBD,MAAlB,EAA0B;AACtBlB,QAAAA,QAAQ,CAAEJ,SAAS,CAAEuB,GAAG,CAACC,GAAN,EAAW,QAAX,CAAX,CAAR,CADsB,CACsB;AAC/C;AAEJ;;AAEDpB,IAAAA,QAAQ,CAAC;AACLc,MAAAA,IAAI,EAACtB,aADA,CAEL;;AAFK,KAAD,CAAR;AAKH;AAGJ,CAzCM","sourcesContent":["import axios from \"axios\";\n//Types\nimport { REGISTER_FAIL, REGISTER_SUCCESS , USER_LOADED, AUTH_ERROR} from \"./types\";\n//Others actions\nimport { _setAlert } from \"./alert\";\n//Utils\nimport { API_URI } from \"../utils/uri\";\nimport configTokenInHeader from \"../utils/configTokenInHeader\";\n\n\n\n/**\n * Load User.\n */\nexport const loadUser = ()=> async dispatch =>{\n\n    if(localStorage.token){\n        configTokenInHeader()\n    }\n} \n\n/**\n * Register User\n */\nexport const _register = ({name, email, password  })=> async dispatch => {\n   \n    //1-Define it explicitly (like in postman environment)\n    const config = {\n        headers: {\n            'Content-Type' : 'application/json'\n        }\n    }\n\n    //2-Convert the JavaScript object to a JSON object\n    const userData = JSON.stringify({name, email, password});\n\n    try {\n        //3-Send request to node server \n        let response = await axios.post(`${API_URI}/register`, userData, config );\n\n        //4-Dispatch action\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: response.data  //srv return token\n        });\n        \n    } catch (error) {\n\n        const errors = error.response.data.errors;\n\n        if(errors){\n            for (const err of errors) {\n                dispatch( _setAlert( err.msg, 'danger'))  ; //We call the action directly\n            }\n            \n        }\n\n        dispatch({\n            type:REGISTER_FAIL\n            //we don't need a payload\n        })\n        \n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}