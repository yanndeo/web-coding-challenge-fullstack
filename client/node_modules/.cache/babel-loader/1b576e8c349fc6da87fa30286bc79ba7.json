{"ast":null,"code":"import axios from \"axios\"; //Types\n\nimport { REGISTER_FAIL, REGISTER_SUCCESS, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERROR, LOGOUT } from \"./types\"; //Others actions\n\nimport { _setAlert } from \"./alert\"; //Utils\n\nimport { API_URI } from \"../utils/uri\";\nimport configTokenInHeader from \"../utils/configTokenInHeader\";\n/**\n * REGISTER USER \n */\n\nexport const _register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  //1-Define it explicitly (like in postman environment)\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    } //2-Convert the JavaScript object to a JSON object\n\n  };\n  const userData = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    //3-Send request to node server \n    const response = await axios.post(\"\".concat(API_URI, \"/register\"), userData, config); //4-Dispatch action\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: response.data //srv return token\n\n    }); //5- load user connected\n    //await (_loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      for (const err of errors) {\n        dispatch(_setAlert(err.msg, 'danger')); //We call the action directly\n      }\n    }\n\n    dispatch({\n      type: REGISTER_FAIL //we don't need a payload\n\n    });\n  }\n};\n/**\n * LOGIN USER\n */\n\nexport const _login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const userData = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const response = await axios.post(\"\".concat(API_URI, \"/login\"), userData, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data\n    });\n    dispatch(_loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      for (const err of errors) {\n        dispatch(_setAlert(err.msg, 'danger'));\n      }\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n/**\n * LOGOUT \n */\n\nexport const _logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};\n/**\n * LOAD USER and update state with his informations\n */\n\nexport const _loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    configTokenInHeader(localStorage.token); //set header request\n  }\n\n  try {\n    const response = await axios.get(\"\".concat(API_URI, \"/auth\"));\n    dispatch({\n      type: USER_LOADED,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};","map":{"version":3,"sources":["/Users/Maranatha/Desktop/PROJECT_JS/MERN_LIST_SHOPS_APP/client/src/actions/auth.js"],"names":["axios","REGISTER_FAIL","REGISTER_SUCCESS","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED","AUTH_ERROR","LOGOUT","_setAlert","API_URI","configTokenInHeader","_register","name","email","password","dispatch","config","headers","userData","JSON","stringify","response","post","type","payload","data","error","errors","err","msg","_login","_loadUser","_logout","localStorage","token","get"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n//Types\nimport { REGISTER_FAIL, REGISTER_SUCCESS, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERROR, LOGOUT} from \"./types\";\n//Others actions\nimport { _setAlert } from \"./alert\";\n\n//Utils\nimport { API_URI } from \"../utils/uri\";\nimport configTokenInHeader from \"../utils/configTokenInHeader\";\n\n\n\n\n\n/**\n * REGISTER USER \n */\nexport const _register = ({ name, email, password  })=> async dispatch => {\n   \n    //1-Define it explicitly (like in postman environment)\n    const config = {\n        headers: {\n            'Content-Type' : 'application/json'\n        }\n    }\n\n    //2-Convert the JavaScript object to a JSON object\n    const userData = JSON.stringify({name, email, password});\n\n    try {\n        //3-Send request to node server \n        const response = await axios.post(`${API_URI}/register`, userData, config );\n\n      \n        //4-Dispatch action\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: response.data  //srv return token\n        });\n\n        //5- load user connected\n       //await (_loadUser());\n       \n\n    } catch (error) {\n        const errors = error.response.data.errors;\n\n        if(errors){\n            for (const err of errors) {\n                dispatch( _setAlert( err.msg, 'danger'))  ; //We call the action directly\n            }\n        }\n\n        dispatch({\n            type:REGISTER_FAIL\n            //we don't need a payload\n        })\n        \n    }\n\n\n};\n\n\n\n\n\n\n\n/**\n * LOGIN USER\n */\nexport const _login = ( email, password ) => async (dispatch) => {\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const userData = JSON.stringify({ email, password });\n\n    try {\n        const response = await axios.post(`${API_URI}/login`, userData, config);\n\n         dispatch({\n            type: LOGIN_SUCCESS,\n            payload: response.data  \n        });\n\n        dispatch(_loadUser());\n\n    }catch(error){\n\n        const errors = error.response.data.errors;\n        if (errors) {\n            for (const err of errors) {\n                dispatch(_setAlert(err.msg, 'danger')); \n            }\n\n        } \n\n        dispatch({ type: LOGIN_FAIL })\n\n    }\n\n\n};\n\n/**\n * LOGOUT \n */\n\nexport const _logout = () => dispatch => {\n\n    dispatch({ type: LOGOUT })\n\n};\n\n\n\n\n/**\n * LOAD USER and update state with his informations\n */\nexport const _loadUser = () => async dispatch => {\n\n    if (localStorage.token) {\n        configTokenInHeader(localStorage.token);   //set header request\n    }\n\n    try {\n        const response = await axios.get(`${API_URI}/auth`);\n\n        dispatch({  type: USER_LOADED, payload: response.data });\n\n    } catch (error) {\n        dispatch({ type: AUTH_ERROR });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}