{"ast":null,"code":"import axios from \"axios\"; //Types\n\nimport { REGISTER_FAIL, REGISTER_SUCCESS, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERROR } from \"./types\"; //Others actions\n\nimport { _setAlert } from \"./alert\"; //Utils\n\nimport { API_URI } from \"../utils/uri\";\nimport configTokenInHeader from \"../utils/configTokenInHeader\";\n/**\n * Load User and update state with his information\n */\n\nexport const _loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    configTokenInHeader(localStorage.token); //set header request\n  }\n\n  try {\n    const response = await axios.get(\"\".concat(API_URI, \"/auth\"));\n    dispatch({\n      type: USER_LOADED,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n/**\n * Register User\n */\n\nexport const _register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  //1-Define it explicitly (like in postman environment)\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    } //2-Convert the JavaScript object to a JSON object\n\n  };\n  const userData = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    //3-Send request to node server \n    let response = await axios.post(\"\".concat(API_URI, \"/register\"), userData, config); //4-Dispatch action\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: response.data //srv return token\n\n    });\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      for (const err of errors) {\n        dispatch(_setAlert(err.msg, 'danger')); //We call the action directly\n      }\n    }\n\n    dispatch({\n      type: REGISTER_FAIL //we don't need a payload\n\n    });\n  }\n};\n/**\n * Login User\n */\n\nexport const _login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const userData = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    let response = await axios.post(\"\".concat(API_URI, \"/login\"), userData, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data\n    });\n    dispatch(_lo);\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      for (const err of errors) {\n        dispatch(_setAlert(err.msg, 'danger'));\n      }\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/Maranatha/Desktop/PROJECT_JS/MERN_LIST_SHOPS_APP/client/src/actions/auth.js"],"names":["axios","REGISTER_FAIL","REGISTER_SUCCESS","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED","AUTH_ERROR","_setAlert","API_URI","configTokenInHeader","_loadUser","dispatch","localStorage","token","response","get","type","payload","data","error","_register","name","email","password","config","headers","userData","JSON","stringify","post","errors","err","msg","_login","_lo"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n//Types\nimport { REGISTER_FAIL, REGISTER_SUCCESS, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERROR} from \"./types\";\n//Others actions\nimport { _setAlert } from \"./alert\";\n//Utils\nimport { API_URI } from \"../utils/uri\";\nimport configTokenInHeader from \"../utils/configTokenInHeader\";\n\n\n\n/**\n * Load User and update state with his information\n */\nexport const _loadUser = ()=> async dispatch =>{\n\n    if(localStorage.token){\n        configTokenInHeader(localStorage.token);   //set header request\n    }\n\n    try {\n        const response = await axios.get(`${API_URI}/auth`);\n\n        dispatch({\n            type:USER_LOADED,\n            payload: response.data\n        });\n\n    } catch (error) {\n        dispatch({ type: AUTH_ERROR  });\n    }\n} \n\n\n\n/**\n * Register User\n */\nexport const _register = ({name, email, password  })=> async dispatch => {\n   \n    //1-Define it explicitly (like in postman environment)\n    const config = {\n        headers: {\n            'Content-Type' : 'application/json'\n        }\n    }\n\n    //2-Convert the JavaScript object to a JSON object\n    const userData = JSON.stringify({name, email, password});\n\n    try {\n        //3-Send request to node server \n        let response = await axios.post(`${API_URI}/register`, userData, config );\n\n        //4-Dispatch action\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: response.data  //srv return token\n        });\n        \n    } catch (error) {\n\n        const errors = error.response.data.errors;\n\n        if(errors){\n            for (const err of errors) {\n                dispatch( _setAlert( err.msg, 'danger'))  ; //We call the action directly\n            }\n            \n        }\n\n        dispatch({\n            type:REGISTER_FAIL\n            //we don't need a payload\n        })\n        \n    }\n\n\n}\n\n\n\n\n\n\n\n/**\n * Login User\n */\nexport const _login = ( email, password ) => async dispatch => {\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const userData = JSON.stringify({ email, password });\n\n    try {\n        let response = await axios.post(`${API_URI}/login`, userData, config);\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: response.data  \n        });\n\n        dispatch(_lo)\n\n    } catch (error) {\n        const errors = error.response.data.errors;\n        if (errors) {\n            for (const err of errors) {\n                dispatch(_setAlert(err.msg, 'danger')); \n            }\n\n        }\n\n        dispatch({ type: LOGIN_FAIL })\n\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}