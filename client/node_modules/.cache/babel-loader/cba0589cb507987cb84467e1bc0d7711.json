{"ast":null,"code":"var _jsxFileName = \"/Users/Maranatha/Desktop/PROJECT_JS/MERN_LIST_SHOPS_APP/client/src/components/ShopListPreferred.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\"; //Component\n\nimport ShopItem from \"./ShopItem\";\nimport AlertNotification from \"./layout/AlertNotification\"; //Actions\n\nimport { _setAlert } from '../actions/alert';\nimport { _getMyPreferredShops } from \"../actions/shop\";\n_re;\n\nconst ShopListPreferred = ({\n  shops,\n  loading,\n  _setAlert,\n  _getMyPreferredShops,\n  errors\n}) => {\n  /**\n   * Hook React \n   * Define lifecycle component() and\n   */\n  useEffect(() => {\n    //Define page's title\n    document.title = \"Preferred Shop\"; //Load default data shop list\n\n    _getMyPreferredShops();\n\n    console.log('mvmt');\n  }, []); //=> specify just for mount and unmount()\n\n  /**\n   * Define () that return shops list nearby of user\n   * from store \n   */\n\n  const renderShopList = () => {\n    return shops.map((shop, id) => {\n      return React.createElement(ShopItem, {\n        key: id,\n        shop: shop,\n        preferred: true,\n        handleRemoveCallback: handleRemoveShopFromPreferredList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n    });\n  };\n  /**\n   * Make a spinner for loading store is true\n   */\n\n\n  const renderSpinner = () => {\n    return React.createElement(\"div\", {\n      style: {\n        marginLeft: 473\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"/images/spinner.gif\",\n      alt: \"spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  };\n  /**\n   * Handle content \n   * if shop is empty or not\n   * it loading is true or false\n   * component required be connected\n   */\n\n\n  const renderContent = () => {\n    if (!loading) {\n      if (shops === null) {\n        return _setAlert(errors.msg, 'primary');\n      } else {\n        return renderShopList();\n      }\n    } else {\n      renderSpinner();\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(AlertNotification, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"site-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row col-md-12 \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, renderContent())))));\n};\n\nShopListPreferred.propTypes = {\n  _setAlert: PropTypes.func.isRequired,\n  _getMyPreferredShops: PropTypes.func.isRequired,\n  // _removeShop: PropTypes.func,\n  shops: PropTypes.array,\n  loading: PropTypes.bool,\n  errors: PropTypes.object //isAuthentificated: PropTypes.func.isRequired,\n\n}; // mappons le state dans les props du component\n\nconst mapStateToProps = state => ({\n  shops: state.shop.preferred_shops,\n  loading: state.shop.loading,\n  errors: state.shop.errors,\n  sAuthentificated: state.auth.isAuthentificated,\n  status: state.shop.status\n});\n\nexport default connect(mapStateToProps, {\n  _getMyPreferredShops,\n  _setAlert\n})(ShopListPreferred);","map":{"version":3,"sources":["/Users/Maranatha/Desktop/PROJECT_JS/MERN_LIST_SHOPS_APP/client/src/components/ShopListPreferred.js"],"names":["React","Fragment","useEffect","connect","PropTypes","ShopItem","AlertNotification","_setAlert","_getMyPreferredShops","_re","ShopListPreferred","shops","loading","errors","document","title","console","log","renderShopList","map","shop","id","handleRemoveShopFromPreferredList","renderSpinner","marginLeft","renderContent","msg","propTypes","func","isRequired","array","bool","object","mapStateToProps","state","preferred_shops","sAuthentificated","auth","isAuthentificated","status"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B,C,CACA;;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACAC,GAAG;;AAGH,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBL,EAAAA,SAAlB;AAA6BC,EAAAA,oBAA7B;AAAkDK,EAAAA;AAAlD,CAAD,KAAgE;AAEtF;;;;AAIAX,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACAY,IAAAA,QAAQ,CAACC,KAAT,oBAHY,CAKZ;;AACAP,IAAAA,oBAAoB;;AAEpBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAIH,GAZQ,EAYN,EAZM,CAAT,CANsF,CAkB/E;;AAMP;;;;;AAIA,QAAMC,cAAc,GAAG,MAAM;AACzB,WAAOP,KAAK,CAACQ,GAAN,CAAU,CAACC,IAAD,EAAOC,EAAP,KAAc;AAC3B,aAAO,oBAAC,QAAD;AACK,QAAA,GAAG,EAAEA,EADV;AAEK,QAAA,IAAI,EAAED,IAFX;AAGK,QAAA,SAAS,EAAE,IAHhB;AAIK,QAAA,oBAAoB,EAAEE,iCAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAOH,KARM,CAAP;AASH,GAVD;AAYA;;;;;AAGA,QAAMC,aAAa,GAAG,MAAM;AACxB,WAAQ;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJ;AAAK,MAAA,GAAG,EAAC,qBAAT;AAA+B,MAAA,GAAG,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADI,CAAR;AAGH,GAJD;AAYA;;;;;;;;AAOA,QAAMC,aAAa,GAAG,MAAI;AAEtB,QAAG,CAACb,OAAJ,EAAY;AAER,UAAID,KAAK,KAAK,IAAd,EAAqB;AAChB,eAAOJ,SAAS,CAACM,MAAM,CAACa,GAAR,EAAa,SAAb,CAAhB;AAEJ,OAHD,MAGK;AACD,eAAOR,cAAc,EAArB;AACH;AAEJ,KATD,MASK;AACDK,MAAAA,aAAa;AAChB;AAEJ,GAfD;;AAoBA,SAEI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAII;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACME,aAAa,EADnB,CAFJ,CADJ,CADJ,CAJJ,CAFJ;AAmBH,CArGD;;AAwGAf,iBAAiB,CAACiB,SAAlB,GAA8B;AAC1BpB,EAAAA,SAAS,EAAEH,SAAS,CAACwB,IAAV,CAAeC,UADA;AAE1BrB,EAAAA,oBAAoB,EAAEJ,SAAS,CAACwB,IAAV,CAAeC,UAFX;AAG3B;AACClB,EAAAA,KAAK,EAAEP,SAAS,CAAC0B,KAJS;AAK1BlB,EAAAA,OAAO,EAAER,SAAS,CAAC2B,IALO;AAM1BlB,EAAAA,MAAM,EAACT,SAAS,CAAC4B,MANS,CAO1B;;AAP0B,CAA9B,C,CAaA;;AACA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCvB,EAAAA,KAAK,EAAEuB,KAAK,CAACd,IAAN,CAAWe,eADc;AAEhCvB,EAAAA,OAAO,EAAEsB,KAAK,CAACd,IAAN,CAAWR,OAFY;AAGhCC,EAAAA,MAAM,EAAEqB,KAAK,CAACd,IAAN,CAAWP,MAHa;AAIhCuB,EAAAA,gBAAgB,EAAEF,KAAK,CAACG,IAAN,CAAWC,iBAJG;AAKhCC,EAAAA,MAAM,EAAEL,KAAK,CAACd,IAAN,CAAWmB;AALa,CAAL,CAA7B;;AAQA,eAAepC,OAAO,CAAC8B,eAAD,EAAkB;AAAEzB,EAAAA,oBAAF;AAAwBD,EAAAA;AAAxB,CAAlB,CAAP,CAA8DG,iBAA9D,CAAf","sourcesContent":["\nimport React, { Fragment, useEffect } from 'react'\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\n//Component\nimport ShopItem from \"./ShopItem\";\nimport AlertNotification from \"./layout/AlertNotification\";\n//Actions\nimport { _setAlert } from '../actions/alert';\nimport { _getMyPreferredShops } from \"../actions/shop\";\n_re\n\n\nconst ShopListPreferred = ({ shops, loading, _setAlert, _getMyPreferredShops,errors }) => {\n\n    /**\n     * Hook React \n     * Define lifecycle component() and\n     */\n    useEffect(() => {\n\n        //Define page's title\n        document.title = `Preferred Shop`;\n\n        //Load default data shop list\n        _getMyPreferredShops();\n\n        console.log('mvmt')\n\n      \n\n    }, []) //=> specify just for mount and unmount()\n\n\n\n\n   \n    /**\n     * Define () that return shops list nearby of user\n     * from store \n     */\n    const renderShopList = () => {\n        return shops.map((shop, id) => {\n            return <ShopItem \n                        key={id} \n                        shop={shop} \n                        preferred={true}\n                        handleRemoveCallback={handleRemoveShopFromPreferredList}\n                    />\n\n        })    \n    };\n\n    /**\n     * Make a spinner for loading store is true\n     */\n    const renderSpinner = () => {\n        return (<div style={{ marginLeft: 473, }}>\n            <img src=\"/images/spinner.gif\" alt=\"spinner\" />\n        </div>)\n    }\n\n\n\n\n\n\n\n    /**\n     * Handle content \n     * if shop is empty or not\n     * it loading is true or false\n     * component required be connected\n     */\n\n    const renderContent = ()=>{\n\n        if(!loading){\n\n            if (shops === null ) {\n                 return _setAlert(errors.msg, 'primary');\n\n            }else{\n                return renderShopList()\n            }\n\n        }else{\n            renderSpinner()\n        }\n       \n    }\n\n\n\n\n    return (\n\n        <Fragment>\n\n            <AlertNotification />\n\n            <div className=\"site-section\">\n                <div className=\"container\">\n                    <div className=\"row\">\n\n                        <div className=\"row col-md-12 \">\n                            { renderContent() }\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\n\nShopListPreferred.propTypes = {\n    _setAlert: PropTypes.func.isRequired,\n    _getMyPreferredShops: PropTypes.func.isRequired,\n   // _removeShop: PropTypes.func,\n    shops: PropTypes.array,\n    loading: PropTypes.bool,\n    errors:PropTypes.object,\n    //isAuthentificated: PropTypes.func.isRequired,\n    \n\n};\n\n\n// mappons le state dans les props du component\nconst mapStateToProps = state => ({\n  shops: state.shop.preferred_shops,\n  loading: state.shop.loading,\n  errors: state.shop.errors,\n  sAuthentificated: state.auth.isAuthentificated, \n  status: state.shop.status\n});\n\nexport default connect(mapStateToProps, { _getMyPreferredShops, _setAlert })(ShopListPreferred);\n"]},"metadata":{},"sourceType":"module"}